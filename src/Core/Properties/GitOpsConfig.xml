<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GitOpsConfig</name>
    </assembly>
    <members>
        <member name="M:GitOpsConfig.Internals.Patterns.NestedVariable">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match the string "$(".<br/>
            ○ "name" capture group.<br/>
                ○ Match a word character atomically at least once.<br/>
                ○ Loop greedily at least once.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a word character atomically at least once.<br/>
            ○ Match ')'.<br/>
            </code>
            </remarks>
        </member>
        <member name="P:GitOpsConfig.Variable.Value">
            <summary>
                Gets the final resolved value for this variable.
            </summary>
        </member>
        <member name="T:GitOpsConfig.VariableSource">
            <summary>
                The source of a variable.
            </summary>
            <param name="Sections">The section that this variable was defined in.</param>
            <param name="Value">The value of the variable at this section.</param>
        </member>
        <member name="M:GitOpsConfig.VariableSource.#ctor(System.String[],System.String)">
            <summary>
                The source of a variable.
            </summary>
            <param name="Sections">The section that this variable was defined in.</param>
            <param name="Value">The value of the variable at this section.</param>
        </member>
        <member name="P:GitOpsConfig.VariableSource.Sections">
            <summary>The section that this variable was defined in.</summary>
        </member>
        <member name="P:GitOpsConfig.VariableSource.Value">
            <summary>The value of the variable at this section.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NestedVariable_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NestedVariable method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NestedVariable_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NestedVariable_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NestedVariable_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NestedVariable_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NestedVariable_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NestedVariable_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NestedVariable_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NestedVariable_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
    </members>
</doc>
